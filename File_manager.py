import osimport shutilfrom utils import resolve_duplicate_filename, log_actiondef classify_files_by_extension(path, config):    files_by_ext = {}    if config["recursive"]:        for root, _, files in os.walk(path):            for file in files:                ext = os.path.splitext(file)[1][1:] or "no_extension"                if ext in config["excluded_extensions"]:                    continue                files_by_ext.setdefault(ext, []).append(os.path.join(root, file))    else:        for file in os.listdir(path):            full_path = os.path.join(path, file)            if os.path.isfile(full_path):                ext = os.path.splitext(file)[1][1:] or "no_extension"                if ext in config["excluded_extensions"]:                    continue                files_by_ext.setdefault(ext, []).append(full_path)    return files_by_extdef create_extension_folders(base_path, extensions):    for ext in extensions:        ext_folder = os.path.join(base_path, ext)        os.makedirs(ext_folder, exist_ok=True)def move_files_to_folders(files_by_ext, base_path, config):    for ext, files in files_by_ext.items():        folder = os.path.join(config["output_directory"] or base_path, ext)        os.makedirs(folder, exist_ok=True)        for file_path in files:            filename = os.path.basename(file_path)            target_path = os.path.join(folder, filename)            target_path = resolve_duplicate_filename(target_path)            if config["dry_run"]:                log_action(f"[SIMULATION] Move: {file_path} -> {target_path}", config["log_file"])            else:                shutil.move(file_path, target_path)                log_action(f"Moved: {file_path} -> {target_path}", config["log_file"])
